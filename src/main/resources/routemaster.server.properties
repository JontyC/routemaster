# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# This is the example properties file for the server - used for examples only
# All lines are commented out and can be used for for reference
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# All lines that start with the '#' symbol will be ignored.
#

#
# These are the current options that are available, namely the location of the
# 404, and 500 error pages
#
#option.error.500=/error/500.html
#option.error.404=/error/404.html

#
# What index files are registered - these are the files which will be search for
# in the requested directory if no specific file is requested
#
#option.indexfiles=index.html.templar,index.html,index.htm

#
# If you wish to define a route, start the property name with a 'route.' and it
# will be bound to the defined path.
#
# routes __must__ extend
#     synapticloop.nanohttpd.router.Routable

#route./*=synapticloop.nanohttpd.servant.ClasspathFileServant

#
# If you wish to define a restful route, start the property name with a 'rest.'
# and it will be bound to the defined path and pass through any defined
# parameters as a hashmap
#
# rest routes __must__ extend
#     synapticloop.nanohttpd.router.RestRoutable

#rest./rest/%method%/=synapticloop.nanohttpd.example.servant.RouteMasterRestTemplarServant

# This is a simple rest servant that shows the various http methods being called
# with mapped and unmapped parameters.  Any parameters that form part of the
# uri after the /%mapped%/ mapping will be passed through wholly as a string
# of 'unmapped'
#
# e.g.:
#  public Response doGet(File rootDir, IHTTPSession httpSession, HashMap<String, String> restParams, String unmappedParams)
#
# rest routes __must__ extend
#     synapticloop.nanohttpd.router.RestRoutable

#rest./simple/%mapped%/=synapticloop.nanohttpd.example.servant.SimpleRestServant



# Now for some handlers - this is for the templar handle (bound to *.templar)

#handler.templar=synapticloop.nanohttpd.handler.TemplarHandler

# This is a simple static file listing servant - this will only work if you are 
# running it from a file system which has a 'src' directory.

#route./src/*=synapticloop.nanohttpd.servant.StaticFileListingServant
