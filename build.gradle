plugins {
	id 'java'
	id 'eclipse'
	id "maven"
	id "maven-publish"

	id "com.github.ben-manes.versions" version "0.28.0"
//	id 'net.saliman.cobertura' version '2.5.4'
	id "com.jfrog.bintray" version "1.8.5"
	id 'co.riiid.gradle' version '0.4.2'

	id "com.github.johnrengelman.shadow" version "5.2.0"

	id "synapticloop.copyrightr" version "1.1.2"
	id "synapticloop.documentr" version "3.1.0"
}

apply plugin: 'com.github.johnrengelman.shadow'

version = '2.3.0'

group = 'synapticloop'
archivesBaseName = 'routemaster'
description = """lightweight web server with RESTful routing"""

sourceCompatibility = 1.9
targetCompatibility = 1.9

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}

configurations {
	server
}

dependencies {
	runtime 'synapticloop:templar:1.4.2'
	runtime 'org.nanohttpd:nanohttpd:2.3.1'

	compile 'synapticloop:templar:1.4.2'
	compile 'org.nanohttpd:nanohttpd:2.3.1'

	server 'org.nanohttpd:nanohttpd:2.3.1'

	testCompile 'junit:junit:4.13'
	testCompile 'org.mockito:mockito-all:2.0.2-beta'
	testCompile 'synapticloop:templar:1.5.0'
}

jar {
	manifest {
		attributes(
			"Main-Class": "synapticloop.nanohttpd.RouteMasterServer",
			"Implementation-Version": version
		)
	}
	exclude(
		'META-INF/INDEX.LIST', 
		'META-INF/*.SF', 
		'META-INF/*.DSA', 
		'META-INF/*.RSA',
		'*.html',
		'/error/*',
		'/static/*',
		'/templar/*',
		'/*.templar'
	)
}

shadowJar {
	classifier = "example"
	destinationDir = libsDir
	baseName = 'routemaster'
	from sourceSets.main.output
	configurations = [project.configurations.runtime]
}

task shadowJarServer(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	classifier = ""
	destinationDir = libsDir
	baseName = 'routemaster-server'

	manifest {
		attributes(
			"Main-Class": "synapticloop.nanohttpd.RouteMasterServer",
			"Implementation-Version": version
		)
	}

	from sourceSets.main.output
	configurations = [project.configurations.server]
	exclude(
		'META-INF/INDEX.LIST', 
		'META-INF/*.SF', 
		'META-INF/*.DSA', 
		'META-INF/*.RSA',
		'*.html',
		'/error/*',
		'/static/*',
		'/templar/*',
		'/*.templar',
		'/routemaster.properties'
	)
}

task copyRoutemasterServerDotProperties(type: Copy) {
	from('src/main/resources/')
	into('build/resources/main')
	include('routemaster.server.properties')
	rename {
		fileName -> "routemaster.properties"
	}
}

task (server).dependsOn([ 'build', 'copyRoutemasterServerDotProperties', 'shadowJarServer' ])
/*
cobertura {
	coverageFormats = [ 'html', 'xml']
}*/

test {
	include '**/*Test.class' 
	maxParallelForks = 5
	forkEvery = 50 
}


ant.version = version
ant.buildDir = buildDir

def javaApiUrl = 'http://docs.oracle.com/javase/1.7.0/docs/api/'
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'

tasks.withType(Javadoc) {
	options.links(javaApiUrl, groovyApiUrl)
	exclude '**/fi/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

/*
 * Create the example server
 */

task copyRoutemasterDotProperties(type: Copy) {
	from('src/main/resources/')
	into('build/resources/main')
	include('routemaster.example.templar.properties')
	rename {
		fileName -> "routemaster.properties"
	}
}

task copyExampleResourcesProperties(type: Copy) {
	from('src/main/html/')
	into('build/resources/main/')
}

task (example).dependsOn([ 'copyRoutemasterDotProperties', 'copyExampleResourcesProperties', 'shadowJar' ])


/*
 * Publishing to various sources
 */

publishing {
	publications {
		Synapticloop(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar

			groupId 'synapticloop'
			artifactId 'routemaster'

			pom.withXml {
				configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
					asNode().dependencies[0].dependency.find {
						it.artifactId[0].text() == dep.moduleName &&
								it.groupId[0].text() == dep.moduleGroup
					}.scope[0].value = 'compile'
				}
			}
		}

		SynapticloopServer(MavenPublication) {
			artifact 'build/libs/routemaster-server-' + version + '.jar'
			artifactId 'routemaster-server'
			artifact sourcesJar
			artifact javadocJar

			pom.withXml {
				def dependency = asNode().appendNode('dependencies').appendNode('dependency')
				dependency.appendNode('groupId', 'synapticloop')
				dependency.appendNode('artifactId', 'routemaster-server')
				dependency.appendNode('version', version)
			}
		}
	}
}

github {
	owner = group
	repo = archivesBaseName
	if(System.getenv('GITHUB_TOKEN')) {
		token = System.getenv('GITHUB_TOKEN')
	}
	tagName = version
	name = version
	assets = [
		'build/libs/' + archivesBaseName + '-' + version + '.jar',
		'build/libs/' + archivesBaseName + '-' + version + '-example.jar',
		'build/libs/' + archivesBaseName + '-' + version + '-server.jar'
	]
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_PASSWORD')

	publications = [ 'Synapticloop' ]

	publish = true

	pkg {
		repo = 'maven'
		name = 'routemaster'
	}
}

//task example.mustRunAfter('build')
//task server.mustRunAfter('example')

build.finalizedBy([ 'example', 'server' ])
